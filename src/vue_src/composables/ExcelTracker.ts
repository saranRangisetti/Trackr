import { ref } from 'vue';
import { ExcelGenerator, type JobApplication } from '@/utils/ExcelGenerator';

const applications = ref<JobApplication[]>([]);

export function useExcelTracker() {
  
  // Function to add a new job application
  const addApplication = (jobData: Partial<JobApplication>) => {
    const newApplication: JobApplication = {
      id: Date.now().toString(),
      company: jobData.company || 'Unknown Company',
      position: jobData.position || 'Unknown Position',
      dateApplied: new Date().toLocaleDateString(),
      status: jobData.status || 'Applied',
      jobUrl: jobData.jobUrl || '',
      location: jobData.location || '',
      salary: jobData.salary || '',
      notes: jobData.notes || '',
      ...jobData
    };
    
    applications.value.push(newApplication);
    
    // Update Excel file
    updateExcelFile();
    
    return newApplication;
  };

  // Function to update application status
  const updateApplicationStatus = (id: string, status: JobApplication['status']) => {
    const application = applications.value.find(app => app.id === id);
    if (application) {
      application.status = status;
      updateExcelFile();
    }
  };

  // Function to create/update Excel file
  const updateExcelFile = async () => {
    try {
      // Create Excel data structure
      const excelData = createExcelData();
      
      // Convert to CSV format (Excel can open CSV files)
      const csvContent = convertToCSV(excelData);
      
      // Create and download the file
      downloadFile(csvContent, 'Job_Applications_Trackr.csv');
      
      console.log('Excel file updated successfully!');
    } catch (error) {
      console.error('Error updating Excel file:', error);
    }
  };

  // Function to create Excel data structure
  const createExcelData = () => {
    const headers = [
      'Date Applied',
      'Company',
      'Position',
      'Status',
      'Location',
      'Salary',
      'Job URL',
      'Notes'
    ];

    const rows = applications.value.map(app => [
      app.dateApplied,
      app.company,
      app.position,
      app.status,
      app.location || '',
      app.salary || '',
      app.jobUrl,
      app.notes || ''
    ]);

    return [headers, ...rows];
  };

  // Function to convert data to CSV format
  const convertToCSV = (data: string[][]) => {
    return data.map(row => 
      row.map(cell => `"${cell.toString().replace(/"/g, '""')}"`).join(',')
    ).join('\n');
  };

  // Function to download file to desktop
  const downloadFile = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  // Function to get applications from storage
  const loadApplications = async () => {
    try {
      const result = await chrome.storage.local.get(['jobApplications']);
      if (result.jobApplications) {
        applications.value = result.jobApplications;
      }
    } catch (error) {
      console.error('Error loading applications:', error);
    }
  };

  // Function to save applications to storage
  const saveApplications = async () => {
    try {
      await chrome.storage.local.set({ jobApplications: applications.value });
    } catch (error) {
      console.error('Error saving applications:', error);
    }
  };

  // Function to export to Excel format (more advanced)
  const exportToExcel = async () => {
    try {
      // Use the advanced Excel generator
      await ExcelGenerator.createJobTrackerExcel(applications.value);
    } catch (error) {
      console.error('Error exporting to Excel:', error);
    }
  };

  // Function to create advanced Excel data
  const createAdvancedExcelData = () => {
    const data = createExcelData();
    
    // Add summary statistics
    const summary = [
      ['JOB APPLICATION TRACKER - GENERATED BY TRACKR'],
      ['Generated on: ' + new Date().toLocaleString()],
      ['Total Applications: ' + applications.value.length],
      ['Applied: ' + applications.value.filter(app => app.status === 'Applied').length],
      ['Interview: ' + applications.value.filter(app => app.status === 'Interview').length],
      ['Rejected: ' + applications.value.filter(app => app.status === 'Rejected').length],
      ['Offer: ' + applications.value.filter(app => app.status === 'Offer').length],
      [''],
      ...data
    ];

    return convertToCSV(summary);
  };

  return {
    applications: applications.value,
    addApplication,
    updateApplicationStatus,
    updateExcelFile,
    loadApplications,
    saveApplications,
    exportToExcel
  };
}
