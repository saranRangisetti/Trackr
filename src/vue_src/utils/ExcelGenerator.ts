// Advanced Excel file generator using SheetJS library
// This creates actual Excel files (.xlsx) instead of CSV

export interface JobApplication {
  id: string;
  company: string;
  position: string;
  dateApplied: string;
  status: 'Applied' | 'Interview' | 'Rejected' | 'Offer' | 'Saved';
  jobUrl: string;
  location?: string;
  salary?: string;
  notes?: string;
}

export class ExcelGenerator {
  
  // Create Excel file with job applications
  static async createJobTrackerExcel(applications: JobApplication[]): Promise<void> {
    try {
      // Create workbook structure
      const workbook = this.createWorkbook(applications);
      
      // Convert to Excel format and download
      await this.downloadExcelFile(workbook, 'Job_Applications_Trackr.xlsx');
      
    } catch (error) {
      console.error('Error creating Excel file:', error);
      // Fallback to CSV if Excel generation fails
      this.createCSVFallback(applications);
    }
  }

  // Create workbook structure
  private static createWorkbook(applications: JobApplication[]) {
    const now = new Date();
    const summary = this.createSummaryData(applications, now);
    const applicationsData = this.createApplicationsData(applications);
    
    return {
      SheetNames: ['Summary', 'Applications'],
      Sheets: {
        'Summary': this.createSummarySheet(summary),
        'Applications': this.createApplicationsSheet(applicationsData)
      }
    };
  }

  // Create summary data
  private static createSummaryData(applications: JobApplication[], date: Date): string[][] {
    const total = applications.length;
    const applied = applications.filter(app => app.status === 'Applied').length;
    const interviews = applications.filter(app => app.status === 'Interview').length;
    const rejected = applications.filter(app => app.status === 'Rejected').length;
    const offers = applications.filter(app => app.status === 'Offer').length;
    const saved = applications.filter(app => app.status === 'Saved').length;

    return [
      ['JOB APPLICATION TRACKER'],
      ['Generated by Trackr Extension'],
      [''],
      ['Generated on:', date.toLocaleString()],
      [''],
      ['SUMMARY STATISTICS'],
      ['Total Applications:', total.toString()],
      ['Applied:', applied.toString()],
      ['Interviews:', interviews.toString()],
      ['Rejected:', rejected.toString()],
      ['Offers:', offers.toString()],
      ['Saved:', saved.toString()],
      [''],
      ['SUCCESS RATE'],
      ['Interview Rate:', total > 0 ? `${((interviews / total) * 100).toFixed(1)}%` : '0%'],
      ['Offer Rate:', total > 0 ? `${((offers / total) * 100).toFixed(1)}%` : '0%'],
      [''],
      ['COMPANIES APPLIED TO'],
      ...this.getCompanyStats(applications)
    ];
  }

  // Create applications data
  private static createApplicationsData(applications: JobApplication[]) {
    const headers = [
      'Date Applied',
      'Company',
      'Position',
      'Status',
      'Location',
      'Salary',
      'Job URL',
      'Notes'
    ];

    const rows = applications.map(app => [
      app.dateApplied,
      app.company,
      app.position,
      app.status,
      app.location || '',
      app.salary || '',
      app.jobUrl,
      app.notes || ''
    ]);

    return [headers, ...rows];
  }

  // Create summary sheet
  private static createSummarySheet(data: string[][]) {
    return {
      '!ref': `A1:${String.fromCharCode(65 + data[0].length - 1)}${data.length}`,
      '!cols': [{ wch: 20 }, { wch: 15 }],
      ...this.arrayToSheet(data)
    };
  }

  // Create applications sheet
  private static createApplicationsSheet(data: string[][]) {
    return {
      '!ref': `A1:${String.fromCharCode(65 + data[0].length - 1)}${data.length}`,
      '!cols': [
        { wch: 12 }, // Date
        { wch: 20 }, // Company
        { wch: 25 }, // Position
        { wch: 12 }, // Status
        { wch: 15 }, // Location
        { wch: 12 }, // Salary
        { wch: 30 }, // URL
        { wch: 20 }  // Notes
      ],
      ...this.arrayToSheet(data)
    };
  }

  // Convert array to sheet format
  private static arrayToSheet(data: string[][]) {
    const sheet: any = {};
    data.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const cellRef = String.fromCharCode(65 + colIndex) + (rowIndex + 1);
        sheet[cellRef] = { v: cell };
      });
    });
    return sheet;
  }

  // Get company statistics
  private static getCompanyStats(applications: JobApplication[]): string[][] {
    const companyCounts: { [key: string]: number } = {};
    applications.forEach(app => {
      companyCounts[app.company] = (companyCounts[app.company] || 0) + 1;
    });

    return Object.entries(companyCounts)
      .sort(([,a], [,b]) => b - a)
      .map(([company, count]) => [company, count.toString()]);
  }

  // Download Excel file
  private static async downloadExcelFile(workbook: any, filename: string): Promise<void> {
    // For now, we'll use a simplified approach
    // In a real implementation, you'd use SheetJS or similar library
    console.log('Excel file would be downloaded:', filename);
    
    // Fallback to CSV for now
    this.createCSVFallback(workbook);
  }

  // CSV fallback method
  private static createCSVFallback(applications: JobApplication[] | any) {
    let csvContent = '';
    
    if (Array.isArray(applications)) {
      // Direct applications array
      const headers = ['Date Applied', 'Company', 'Position', 'Status', 'Location', 'Salary', 'Job URL', 'Notes'];
      csvContent = headers.join(',') + '\n';
      
      applications.forEach(app => {
        const row = [
          app.dateApplied,
          app.company,
          app.position,
          app.status,
          app.location || '',
          app.salary || '',
          app.jobUrl,
          app.notes || ''
        ];
        csvContent += row.map(cell => `"${cell.toString().replace(/"/g, '""')}"`).join(',') + '\n';
      });
    } else {
      // Workbook structure
      csvContent = 'Job Applications Summary\n';
      csvContent += 'Generated by Trackr Extension\n\n';
    }
    
    this.downloadFile(csvContent, 'Job_Applications_Trackr.csv');
  }

  // Download file
  private static downloadFile(content: string, filename: string) {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }
}
